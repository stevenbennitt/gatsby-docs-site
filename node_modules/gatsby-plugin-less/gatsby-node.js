"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _resolve = _interopRequireDefault(require("./resolve"));

exports.onCreateWebpackConfig = ({
  actions,
  stage,
  rules,
  plugins,
  loaders
}, _ref) => {
  let _ref$cssLoaderOptions = _ref.cssLoaderOptions,
      cssLoaderOptions = _ref$cssLoaderOptions === void 0 ? {} : _ref$cssLoaderOptions,
      postCssPlugins = _ref.postCssPlugins,
      lessOptions = (0, _objectWithoutPropertiesLoose2.default)(_ref, ["cssLoaderOptions", "postCssPlugins"]);
  const setWebpackConfig = actions.setWebpackConfig;
  const PRODUCTION = stage !== `develop`;
  const isSSR = stage.includes(`html`);
  const lessLoader = {
    loader: (0, _resolve.default)(`less-loader`),
    options: Object.assign({
      sourceMap: !PRODUCTION
    }, lessOptions)
  };
  const lessRule = {
    test: /\.less$/,
    use: isSSR ? [loaders.null()] : [loaders.miniCssExtract(), loaders.css(Object.assign({}, cssLoaderOptions, {
      importLoaders: 2
    })), loaders.postcss({
      plugins: postCssPlugins
    }), lessLoader]
  };
  const lessRuleModules = {
    test: /\.module\.less$/,
    use: [!isSSR && loaders.miniCssExtract({
      hmr: false
    }), loaders.css(Object.assign({}, cssLoaderOptions, {
      modules: true,
      importLoaders: 2
    })), loaders.postcss({
      plugins: postCssPlugins
    }), lessLoader].filter(Boolean)
  };
  let configRules = [];

  switch (stage) {
    case `develop`:
    case `build-javascript`:
    case `build-html`:
    case `develop-html`:
      configRules = configRules.concat([{
        oneOf: [lessRuleModules, lessRule]
      }]);
      break;
  }

  setWebpackConfig({
    module: {
      rules: configRules
    }
  });
};